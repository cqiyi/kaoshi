2004年12月1日下午OS上机考试题

1、内存有256个页面，用32*8构成位示图，初始状态已存入bit.txt文件中，1表示已分配，0表示空闲。
2、要求用二维数组表示位示图
3、分配方案：有空闲页就分配，不要求程序连续存放。物理页面号=32*y+x；x为横坐标，y为纵坐标。注：第一个物理页面号为0，0

程序运行流程：
（1）从bit.txt中读入数据初始化该二维数组。
（2）从用户界面根据用户提示接收“程序长度”。
（3）分配，并将位示图中置1。
（4）输出分配给程序的物理页面号（要求用逗号隔开）。
（5）重复（2），（3），（4），直到输入字符为0。
（6）从用户界面根据用户提示接收“回收的物理页面号”。
（7）将回收的内存所对应的位示图置0。
（8）输出位示图中对应的横纵坐标。
（9）输出位示图。
（10）重复（6）（7）（8）（9），直到输入字符为-1。

页面大小：4K
（1）页面分配
输入：程序长度  K
输出：分配的物理页面号（用逗号隔开）
（2）页面回收
输入：页顺号（物理）
输出：位示图中对应该物理页面号的横纵坐标。
 
 
 
这题很简单，关键要注意横纵坐标，还有页面大小！  
 
 
物理页面号=32*y+x

那这样计算出来的物理页面号可能会大于256,书上的计算方法可不是这样的.

我怀疑是不是北大搞错了
 
 
 2004-12-2 9:07:17           
 
  chenyonghua521     
  
  
  等级：新手上路,请多关照 
  文章：10
  积分：262
  注册：2004-11-25
              第 4 楼  
 
 

 

我看也是北大搞错了，应该是物理页面=32*x+y，x为横坐标，y为纵坐标！
 
 
     

当然是32*y+x

一个字是32位的，32位/字 * 8字=256位

x代表一个字中的第几位0~31，y代表第几个字0~7
 
 
 

#include"iostream.h"
#include"stdlib.h"
#include"stdio.h"
#include"malloc.h"
#define MAXROW 16
#define MAXROL 32
void main()
{
int n,count=0;
char ch;
FILE *fp;
    int wei[MAXROW][MAXROL],i=0,j=0,row,rol,Row,Rol;
fp=fopen("wei.txt","r+");
if(fp==NULL)
{
  cout<<"can not find file!"<<endl;
  exit(0);
}
while(i<MAXROW)
{
  while(j<=MAXROL)
  {
   ch=fgetc(fp);
   if(ch=='\n')
    break;
   else
    wei[i][j]=ch-'0';
   j++;
  }
  i++;
  j=0;
}
// fclose(fp);
for(i=0;i<MAXROW;i++)
{    cout<<endl;
    for(j=0;j<MAXROL;j++)
   printf("%d",wei[i][j]);
}
cout<<endl;
   cout<<"请输入要申请的数量：";
   cin>>n;
   for(i=0;i<MAXROW;i++)
   {
    for(j=0;j<MAXROL;j++)
    {
     if((wei[i][j]==0)&&(count==0))
     {
                row=i;
    rol=j;
    count++;
     }
     else
      if((wei[i][j]==0)&&(count<n))
       count++;
      else
       if((wei[i][j]==1)&&(count<n))
        count=0;
       else
        if(count==n)
        {
         Row=i;
         Rol=j;
         break;
        }
  }
    if(count==n)
     break;
   }
    count=0;
   for(i=row;;i++)
  {
        if(count==n)
   break;
     for(j=rol;;j++)
  {
    wei[i][j]=1;
    count++;
    if(count==n)
     break;
  }
   }
   cout<<"起始的行号和列号:  "<<row<<"  "<<rol<<endl;
for(i=0;i<MAXROW;i++)
{    cout<<endl;
    for(j=0;j<MAXROL;j++)
   printf("%d",wei[i][j]);
}
cout<<endl;
fp=fopen("result.txt","w+");
if(fp==NULL)
{
  cout<<"can not find file!"<<endl;
  exit(0);
}
  fprintf(fp,"起始的行号和列号:  ");
  fprintf(fp,"%d",row);
  fprintf(fp,"  ");
  fprintf(fp,"%d",rol);
for(i=0;i<MAXROW;i++)
{    fprintf(fp,"\n");
    for(j=0;j<MAXROL;j++)
   fprintf(fp,"%d",wei[i][j]);
}
}

测试数据

00000000000000000000000000000000
10101010101010101010101010101010
11111111111111111111111111111110
00000000000000000000000000000000
11111111111111100000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
11111111111111111111111111111111
 
 
